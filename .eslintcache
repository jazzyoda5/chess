[{"/Users/macbook/Desktop/Projects/react_chess/chess/src/index.js":"1","/Users/macbook/Desktop/Projects/react_chess/chess/src/App.js":"2","/Users/macbook/Desktop/Projects/react_chess/chess/src/reportWebVitals.js":"3","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/square.js":"4","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/menu.js":"5","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/extras.js":"6","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/panel.js":"7","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/board.js":"8","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/offline_board.js":"9","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/choose_pawn.js":"10"},{"size":545,"mtime":1608407264942,"results":"11","hashOfConfig":"12"},{"size":801,"mtime":1609878186428,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608383234062,"results":"14","hashOfConfig":"12"},{"size":2517,"mtime":1610129778042,"results":"15","hashOfConfig":"12"},{"size":936,"mtime":1609878164370,"results":"16","hashOfConfig":"12"},{"size":6865,"mtime":1610220002263,"results":"17","hashOfConfig":"12"},{"size":1064,"mtime":1610135102521,"results":"18","hashOfConfig":"12"},{"size":14990,"mtime":1610223944103,"results":"19","hashOfConfig":"12"},{"size":10040,"mtime":1610215868247,"results":"20","hashOfConfig":"12"},{"size":2099,"mtime":1610223966408,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"w5az6o",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Desktop/Projects/react_chess/chess/src/index.js",[],["44","45"],"/Users/macbook/Desktop/Projects/react_chess/chess/src/App.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/reportWebVitals.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/components/square.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/components/menu.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/components/extras.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/components/panel.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/components/board.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess/src/components/offline_board.js",["46","47","48"],"import \"fontsource-roboto\";\nimport React, { useState } from \"react\";\nimport \"../static/style.css\";\nimport Square from \"./square\";\nimport Panel from \"./panel.js\";\nimport PawnDialog from \"./choose_pawn\";\n\nconst extras = require(\"./extras.js\");\n\nconst letters = \"abcdefgh\";\n\nfunction OfflineBoard(props) {\n  const [clicked_square, set_clicked_square] = useState(null);\n  const [game_state, set_game_state] = useState(extras.newGame());\n  const [next_move, set_next_move] = useState(\"White\");\n  const [check, set_check] = useState(null);\n  const [valid_moves, set_valid_moves] = useState([]);\n  const [end_w, set_end_w] = useState(null);\n  const [end_b, set_end_b] = useState(null);\n\n  const getRow = (num) => {\n    let row = [];\n\n    for (let i = 0; i <= 7; i++) {\n      let tag = letters[i] + num.toString();\n      row.push({\n        tag: tag,\n      });\n    }\n    return row;\n  };\n\n  const getBoardData = () => {\n    let board_data = [];\n    for (let i = 0; i <= 7; i++) {\n      let row = getRow(i + 1);\n      board_data.push(row);\n    }\n    return board_data;\n  };\n\n  const getSquareValue = (tag) => {\n    // Get i\n    const i = tag[1] - 1;\n\n    // Get j\n    const j = letters.indexOf(tag[0]);\n\n    const value = game_state[i][j];\n\n    return value;\n  };\n\n  function handleClick(tag) {\n    const local_game_state = JSON.parse(JSON.stringify(game_state));\n\n    /*\n            - pawn is the value of previosly chosen square\n            - value is the value of second chosen square!\n            */\n\n    // coordinates of clicked square\n    const coor_x = letters.indexOf(tag[0]);\n    const coor_y = tag[1] - 1;\n\n    // Get pawn in the square that is clicked\n    const value = local_game_state[coor_y][coor_x];\n\n    // Whose move it is\n    let next_move1 = next_move[0].toLowerCase();\n\n    // If no pawn has been chosen in previou click, choose a pawn\n    if (clicked_square === null && value !== \"\" && value[0] === next_move1) {\n      // Set clicked_square in state\n      // Set valid next moves in state\n      console.log('jakob56');\n      const vm = getValidMoves(coor_x, coor_y, value, local_game_state);\n      console.log('v_moves: ', v_moves(local_game_state, vm, coor_x, coor_y, value));\n      set_clicked_square([coor_x, coor_y]);\n      set_valid_moves(v_moves(local_game_state, vm, coor_x, coor_y, value));\n    }\n\n    // If pawn was already previously chosen, make a move\n    else if (clicked_square !== null) {\n      // Get coor of previously chosen pawn\n      var pawn_x = clicked_square[0];\n      var pawn_y = clicked_square[1];\n\n      // Now get previously chosen pawn value\n      var pawn = local_game_state[pawn_y][pawn_x];\n\n      // !!! What to do depends on value on chosen square\n\n      // if chosen pawn and clicked pawn are same color\n      if (value[0] === pawn[0]) {\n        set_clicked_square([coor_x, coor_y]);\n        const vm = getValidMoves(coor_x, coor_y, value, local_game_state);\n\n        set_valid_moves(v_moves(local_game_state, vm, coor_x, coor_y, value));\n      } else {\n        // If move is valid\n        if (\n          extras.check_if_valid_move(coor_x, coor_y, valid_moves, local_game_state)\n        ) {\n          /* If the previous move checked the opponent\n              opponent must make sure his next move\n              unchecks his king\n          */\n\n          // Check if it is a pawn that reached the end\n          // Of the board\n          if (pawn === \"wP\" && coor_y === 0) {\n            set_end_w([coor_x, coor_y, \"wP\"]);\n          }\n          if (pawn === \"bP\" && coor_y === 7) {\n            set_end_b([coor_x, coor_y, \"bP\"]);\n          }\n          // figure out next move\n          if (next_move1 === \"w\") {\n            // White moved, check check on black\n            if (\n              checkCheck(\n                updateGameState(\n                  coor_x,\n                  coor_y,\n                  pawn_x,\n                  pawn_y,\n                  pawn,\n                  local_game_state\n                ),\n                \"w\"\n              )\n            ) {\n              handleCheck(\"b\");\n              console.log(\"check on black\");\n            }\n            set_next_move(\"Black\");\n          } else {\n            // Black moved, check check on white\n            if (\n              checkCheck(\n                updateGameState(\n                  coor_x,\n                  coor_y,\n                  pawn_x,\n                  pawn_y,\n                  pawn,\n                  local_game_state\n                ),\n                \"b\"\n              )\n            ) {\n              handleCheck(\"w\");\n              console.log(\"check on white\");\n            }\n            set_next_move(\"White\");\n          }\n          makeMove(coor_x, coor_y, pawn_x, pawn_y, pawn, local_game_state);\n          // If move is not valid\n        } else {\n          console.log(\"else runs\");\n          const vm = getValidMoves(coor_x, coor_y, value, local_game_state);\n\n          set_clicked_square([coor_x, coor_y]);\n          set_valid_moves(v_moves(local_game_state, vm, coor_x, coor_y, value));\n        }\n      }\n    }\n    console.log(\"game_state_end: \", local_game_state);\n  }\n\n  const makeMove = (x, y, pawn_x, pawn_y, pawn, local_game_state) => {\n    console.log(\"update game state runs\");\n    set_clicked_square(null);\n    set_valid_moves([]);\n    set_game_state(updateGameState(x, y, pawn_x, pawn_y, pawn, local_game_state));\n  };\n\n  const v_moves = (state, moves, x, y, pawn) => {\n    let v_moves = []\n    for (let i = 0; i <= moves.length - 1; i++) {\n      let state_copy = JSON.parse(JSON.stringify(state));\n      let move = moves[i];\n      let pawn1 = state_copy[move[1]][move[0]];\n      let pawn2 = state_copy[y][x];\n      state_copy[move[1]][move[0]] = pawn;\n      state_copy[y][x] = '';\n      let color = 'b';\n      if (pawn[0] === 'b') {\n        color = 'w';\n      }\n      let check = checkCheck(state_copy, color);\n      if (!check) {\n        v_moves.push(move);\n      }  \n    }\n    return v_moves;\n  }\n\n  const getValidMoves = (x, y, pawn, local_game_state) => {\n    let valid_moves = [];\n\n    if (pawn[1] === \"P\") {\n      valid_moves = extras.pawn_valid_moves(x, y, pawn, local_game_state);\n    }\n    // For a rook\n    else if (pawn[1] === \"R\") {\n      valid_moves = extras.rook_valid_moves(x, y, pawn, local_game_state);\n    }\n    // For knight\n    else if (pawn[1] === \"K\" && pawn.length > 2) {\n      valid_moves = extras.knight_valid_moves(x, y, pawn, local_game_state);\n    } else if (pawn[1] === \"K\" && pawn.length === 2) {\n      valid_moves = extras.king_valid_moves(x, y, pawn, local_game_state);\n    } else if (pawn[1] === \"B\") {\n      valid_moves = extras.get_bishop_moves(x, y, pawn, local_game_state);\n    }\n    // Queen\n    else if (pawn[1] === \"Q\") {\n      // First get up, down, left, right; just like rook.\n      valid_moves = extras.rook_valid_moves(x, y, pawn, local_game_state);\n      let b_moves = extras.get_bishop_moves(x, y, pawn, local_game_state);\n      for (let i = 0; i <= b_moves.length - 1; i++) {\n        valid_moves.push(b_moves[i]);\n      }\n    }\n    return valid_moves;\n  };\n\n  const switchPawn = (x, y, pawn) => {\n    let updated_game_state = [... game_state];\n    updated_game_state[y][x] = pawn;\n    set_game_state(updated_game_state);\n    set_end_b(null);\n    set_end_w(null);\n  };\n\n  const updateGameState = (\n    coor_x,\n    coor_y,\n    pawn_x,\n    pawn_y,\n    pawn,\n    l_game_state\n  ) => {\n    l_game_state[coor_y][coor_x] = pawn;\n    l_game_state[pawn_y][pawn_x] = \"\";\n    return l_game_state;\n  };\n\n  const checkCheck = (igame_state, color) => {\n    // Get all valid moves\n    // And see if anyone can eat the opponent's king\n    for (let i = 0; i <= igame_state.length - 1; i++) {\n      for (let j = 0; j <= igame_state[i].length - 1; j++) {\n        let pawn = igame_state[i][j];\n\n        if (pawn[0] === color) {\n          let valid_moves = getValidMoves(j, i, pawn, igame_state);\n          for (let k = 0; k <= valid_moves.length - 1; k++) {\n            let pawn_on_pos = igame_state[valid_moves[k][1]][valid_moves[k][0]];\n            if (pawn_on_pos[1] === \"K\" && pawn_on_pos.length === 2) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const getTagsOfValidMoves = (valid_moves) => {\n    let tags = [];\n    if (valid_moves.length > 0) {\n      for (let i = 0; i <= valid_moves.length - 1; i++) {\n        let move = valid_moves[i];\n        let y = (move[1] + 1).toString();\n        let x = letters[move[0]];\n        let tag = x + y;\n        tags.push(tag);\n      }\n    }\n    return tags;\n  };\n\n  const handleCheck = (color) => {\n    // color = Color of the king that is in danger\n    set_check(color);\n  };\n\n  const handleExit = () => {\n    void 0;\n  };\n\n  // Set the board\n  let board_data = getBoardData();\n\n  return (\n    <div className=\"game\">\n      {end_w ? (\n        <PawnDialog\n          color={\"w\"}\n          open={true}\n          switchPawn={switchPawn}\n          data={end_w}\n        />\n      ) : null}\n      {end_b ? (\n        <PawnDialog\n          color={\"b\"}\n          open={true}\n          switchPawn={switchPawn}\n          data={end_b}\n        />\n      ) : null}\n      <Panel\n        set_game_state={set_game_state}\n        set_next_move={set_next_move}\n        set_check={set_check}\n        handleExit={handleExit}\n        next_move={next_move}\n        online={false}\n      />\n      <div className=\"board\">\n        <div className=\"squares\">\n          {board_data.map((row) => {\n            return (\n              <div className=\"board-row\">\n                {row.map((square) => {\n                  return (\n                    <Square\n                      tag={square.tag}\n                      value={getSquareValue(square.tag)}\n                      handleClick={handleClick}\n                      check={check}\n                      validMoves={getTagsOfValidMoves(valid_moves)}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OfflineBoard;\n","/Users/macbook/Desktop/Projects/react_chess/chess/src/components/choose_pawn.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":184,"column":11,"nodeType":"55","messageId":"56","endLine":184,"endColumn":16},{"ruleId":"53","severity":1,"message":"57","line":185,"column":11,"nodeType":"55","messageId":"56","endLine":185,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":231,"column":34,"nodeType":"60","messageId":"61","endLine":231,"endColumn":35,"fix":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'pawn1' is assigned a value but never used.","Identifier","unusedVar","'pawn2' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"65","text":"66"},"no-global-assign","no-unsafe-negation",[7128,7129],""]