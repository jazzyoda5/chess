[{"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/index.js":"1","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/App.js":"2","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/reportWebVitals.js":"3","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/board.js":"4","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/menu.js":"5","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/offline_board.js":"6","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/panel.js":"7","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/choose_pawn.js":"8","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/extras.js":"9","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/square.js":"10","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/checkmate_dialog.js":"11","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/socket/socket.js":"12","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/choose_color_dialog.js":"13"},{"size":545,"mtime":1610302527891,"results":"14","hashOfConfig":"15"},{"size":1004,"mtime":1610536258237,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1610302527891,"results":"17","hashOfConfig":"15"},{"size":20703,"mtime":1610489030136,"results":"18","hashOfConfig":"15"},{"size":1270,"mtime":1610536973435,"results":"19","hashOfConfig":"15"},{"size":16047,"mtime":1610719095260,"results":"20","hashOfConfig":"15"},{"size":1204,"mtime":1610711122014,"results":"21","hashOfConfig":"15"},{"size":2160,"mtime":1610551279369,"results":"22","hashOfConfig":"15"},{"size":10122,"mtime":1610640698051,"results":"23","hashOfConfig":"15"},{"size":2517,"mtime":1610302527890,"results":"24","hashOfConfig":"15"},{"size":1383,"mtime":1610475269031,"results":"25","hashOfConfig":"15"},{"size":146,"mtime":1610479328131,"results":"26","hashOfConfig":"15"},{"size":1326,"mtime":1610719023358,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ruvln2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/index.js",[],["57","58"],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/App.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/reportWebVitals.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/board.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/menu.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/offline_board.js",["59"],"import \"fontsource-roboto\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../static/style.css\";\nimport Square from \"./square\";\nimport Panel from \"./panel.js\";\nimport PawnDialog from \"./choose_pawn\";\nimport ChooseColorDialog from \"./choose_color_dialog\";\nimport CheckmateDialog from \"./checkmate_dialog\";\nimport { socket } from \"../socket/socket\";\n\nconst extras = require(\"./extras.js\");\n\nconst letters = \"abcdefgh\";\n\n/*\nThere will be two options:\n- To choose a 2-player offline game\n- To play against the computer\n*/\n\nfunction OfflineBoard(props) {\n  const [clicked_square, set_clicked_square] = useState(null);\n  const [game_state, set_game_state] = useState(extras.newGame());\n  const [next_move, set_next_move] = useState(\"White\");\n  const [check, set_check] = useState(null);\n  const [valid_moves, set_valid_moves] = useState([]);\n  const [end_w, set_end_w] = useState(null);\n  const [end_b, set_end_b] = useState(null);\n  const [checkmate, set_checkmate] = useState(false);\n  const [comp_color, set_comp_color] = useState(null);\n  const [player_color, set_player_color] = useState(null);\n\n  useEffect(() => {\n    socket.on(\"computer-move\", (data) => {\n      console.log(\"[SOCKET] Recieved a move from the server. -> \", data);\n      // Make a move\n      makeComputerMove(data);\n    });\n  }, [comp_color,]);\n\n  const getRow = (num) => {\n    let row = [];\n\n    for (let i = 0; i <= 7; i++) {\n      let tag = letters[i] + num.toString();\n      row.push({\n        tag: tag,\n      });\n    }\n    return row;\n  };\n\n  const getBoardData = () => {\n    let board_data = [];\n    for (let i = 0; i <= 7; i++) {\n      let row = getRow(i + 1);\n      board_data.push(row);\n    }\n    return board_data;\n  };\n\n  const getSquareValue = (tag) => {\n    // Get i\n    const i = tag[1] - 1;\n\n    // Get j\n    const j = letters.indexOf(tag[0]);\n\n    const value = game_state[i][j];\n\n    return value;\n  };\n\n  function handleClick(tag) {\n    if (props.mode !== \"1player\" || next_move === player_color) {\n      // Make a copy of the game_state\n      const local_game_state = JSON.parse(JSON.stringify(game_state));\n\n      /*\n            - pawn is the value of previosly chosen square\n            - value is the value of second chosen square!\n            */\n\n      // coordinates of clicked square\n      const coor_x = letters.indexOf(tag[0]);\n      const coor_y = tag[1] - 1;\n\n      // Get pawn in the square that is clicked\n      const value = local_game_state[coor_y][coor_x];\n\n      // Whose move it is\n      let next_move1 = next_move[0].toLowerCase();\n\n      // If no pawn has been chosen in previou click, choose a pawn\n      if (clicked_square === null && value !== \"\" && value[0] === next_move1) {\n        // Set clicked_square in state\n        // Set valid next moves in state\n        const vm = getValidMoves(coor_x, coor_y, value, local_game_state);\n        set_clicked_square([coor_x, coor_y]);\n        set_valid_moves(v_moves(local_game_state, vm, coor_x, coor_y, value));\n      }\n\n      // If pawn was already previously chosen, make a move\n      else if (clicked_square !== null) {\n        // Get coor of previously chosen pawn\n        var pawn_x = clicked_square[0];\n        var pawn_y = clicked_square[1];\n\n        // Now get previously chosen pawn value\n        var pawn = local_game_state[pawn_y][pawn_x];\n\n        // !!! What to do depends on value on chosen square\n\n        // if chosen pawn and clicked pawn are same color\n        if (value[0] === pawn[0]) {\n          set_clicked_square([coor_x, coor_y]);\n          const vm = getValidMoves(coor_x, coor_y, value, local_game_state);\n          if (value[0] === next_move1) {\n            set_valid_moves(\n              v_moves(local_game_state, vm, coor_x, coor_y, value)\n            );\n          } else if (value[0] !== next_move) {\n            set_valid_moves([]);\n          }\n        } else {\n          // There is no pawn of the samo color on clicked square\n          // Try to make a move\n          if (\n            extras.check_if_valid_move(\n              coor_x,\n              coor_y,\n              valid_moves,\n              local_game_state\n            )\n          ) {\n            // Move is valid\n\n            // Castling is handled by a different method\n            // than making a move\n            const castling = extras.check_if_castling(\n              coor_x,\n              coor_y,\n              pawn_x,\n              pawn_y,\n              pawn,\n              local_game_state\n            );\n\n            if (castling !== false) {\n              handleCastling(castling, local_game_state, next_move1);\n              return;\n            }\n\n            // Check if it is a pawn that reached the end\n            // Of the board\n            if (pawn === \"wP\" && coor_y === 0) {\n              set_end_w([coor_x, coor_y, \"wP\"]);\n            }\n            if (pawn === \"bP\" && coor_y === 7) {\n              set_end_b([coor_x, coor_y, \"bP\"]);\n            }\n\n            // figure out next move\n            if (next_move1 === \"w\") {\n              set_next_move(\"Black\");\n            } else {\n              set_next_move(\"White\");\n            }\n            makeMove(coor_x, coor_y, pawn_x, pawn_y, pawn, local_game_state);\n            // If move is not valid\n          } else {\n            console.log(\"else runs\");\n            const vm = getValidMoves(coor_x, coor_y, value, local_game_state);\n\n            set_clicked_square([coor_x, coor_y]);\n            if (value[0] === next_move1) {\n              set_valid_moves(\n                v_moves(local_game_state, vm, coor_x, coor_y, value)\n              );\n            } else {\n              set_valid_moves([]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const makeMove = (x, y, pawn_x, pawn_y, pawn, local_game_state) => {\n    const updated_game_state = updateGameState(\n      x,\n      y,\n      pawn_x,\n      pawn_y,\n      pawn,\n      local_game_state\n    );\n    set_game_state(updated_game_state);\n    set_clicked_square(null);\n    set_valid_moves([]);\n    // Check for check after making a move\n    let color1 = \"b\";\n    if (pawn[0] === \"b\") {\n      color1 = \"w\";\n    }\n    console.log(\"updated_game_state: \", updated_game_state);\n    if (checkCheck(updated_game_state, pawn[0])) {\n      handleCheck(color1, updated_game_state);\n      var lcheck = true;\n    } else {\n      set_check(null);\n    }\n\n    // If playing against the computer\n    if (props.mode === \"1player\" && !end_b && !end_w && !lcheck) {\n      const data = extras.getComputerMoveData(\n        updated_game_state,\n        comp_color,\n        getValidMoves,\n        v_moves\n      );\n      // Emit the data to the server\n      socket.emit(\"computer-move\", {\n        game_state: updated_game_state,\n        comp_color: comp_color,\n      });\n      console.log(\"data emitted\", data);\n    }\n  };\n\n  const makeComputerMove = (data) => {\n    let local_game_state = data[\"game_state\"];\n    console.log(\"comp_color: \", comp_color);\n    let color1 = \"b\";\n    let color2 = \"Black\";\n    if (comp_color === \"b\") {\n      color1 = \"w\";\n      color2 = \"White\";\n    }\n\n    set_game_state(local_game_state);\n    set_next_move(color2);\n\n    if (checkCheck(local_game_state, comp_color)) {\n      handleCheck(color1, local_game_state);\n    } else {\n      set_check(null);\n    }\n  };\n\n  const handleCastling = (type, state, next_move) => {\n    if (type === \"wR\") {\n      state[7][4] = \"\";\n      state[7][5] = \"wR\";\n      state[7][6] = \"wK\";\n      state[7][7] = \"\";\n    } else if (type === \"wL\") {\n      state[7][4] = \"\";\n      state[7][3] = \"wR\";\n      state[7][2] = \"wK\";\n      state[7][1] = \"\";\n      state[7][0] = \"\";\n    } else if (type === \"bR\") {\n      state[0][4] = \"\";\n      state[0][5] = \"bR\";\n      state[0][6] = \"bK\";\n      state[0][7] = \"\";\n    } else if (type === \"bL\") {\n      state[0][4] = \"\";\n      state[0][3] = \"bR\";\n      state[0][2] = \"bK\";\n      state[0][1] = \"\";\n      state[0][0] = \"\";\n    }\n\n    console.log(\"update game state runs\");\n    set_clicked_square(null);\n    set_valid_moves([]);\n    set_game_state(state);\n\n    if (next_move === \"w\") {\n      set_next_move(\"Black\");\n    } else {\n      set_next_move(\"White\");\n    }\n  };\n\n  // This function makes sure\n  // You can't put your self in check\n  const v_moves = (state, moves, x, y, pawn) => {\n    let v_moves = [];\n\n    // For every move in valid_moves check for check\n    for (let i = 0; i <= moves.length - 1; i++) {\n      let state_copy = JSON.parse(JSON.stringify(state));\n      let move = moves[i];\n      state_copy[move[1]][move[0]] = pawn;\n      state_copy[y][x] = \"\";\n      let color = \"b\";\n      if (pawn[0] === \"b\") {\n        color = \"w\";\n      }\n      let check = checkCheck(state_copy, color);\n      if (!check) {\n        v_moves.push(move);\n      }\n    }\n    return v_moves;\n  };\n\n  const getValidMoves = (\n    x,\n    y,\n    pawn,\n    local_game_state,\n    checking_check = false\n  ) => {\n    let valid_moves = [];\n\n    if (pawn[1] === \"P\") {\n      valid_moves = extras.pawn_valid_moves(x, y, pawn, local_game_state);\n    }\n    // For a rook\n    else if (pawn[1] === \"R\") {\n      valid_moves = extras.rook_valid_moves(x, y, pawn, local_game_state);\n    }\n    // For knight\n    else if (pawn[1] === \"K\" && pawn.length > 2) {\n      valid_moves = extras.knight_valid_moves(x, y, pawn, local_game_state);\n    } else if (pawn[1] === \"K\" && pawn.length === 2) {\n      valid_moves = extras.king_valid_moves(x, y, pawn, local_game_state);\n      // If king is in his starting position\n      // Castling might be possible\n      const c_move = extras.castling_possible(x, y, pawn, local_game_state);\n      // c_move !== undefined is a quick bug fix\n      if (c_move !== false && !checking_check && c_move !== undefined) {\n        console.log(\"add_castling_move\");\n        valid_moves.push(c_move);\n      }\n    } else if (pawn[1] === \"B\") {\n      valid_moves = extras.get_bishop_moves(x, y, pawn, local_game_state);\n    }\n    // Queen\n    else if (pawn[1] === \"Q\") {\n      // First get up, down, left, right; just like rook.\n      valid_moves = extras.rook_valid_moves(x, y, pawn, local_game_state);\n      let b_moves = extras.get_bishop_moves(x, y, pawn, local_game_state);\n      for (let i = 0; i <= b_moves.length - 1; i++) {\n        valid_moves.push(b_moves[i]);\n      }\n    }\n    return valid_moves;\n  };\n\n  const switchPawn = (x, y, pawn_x, pawn_y, pawn, next_move1) => {\n    let updated_game_state = JSON.parse(JSON.stringify(game_state));\n    updated_game_state[y][x] = pawn;\n    set_game_state(updated_game_state);\n    set_end_b(null);\n    set_end_w(null);\n\n    // After switching the pawn, make a computer move is mode is 1player\n    if (props.mode === \"1player\") {\n      const data = extras.getComputerMoveData(\n        updated_game_state,\n        comp_color,\n        getValidMoves,\n        v_moves\n      );\n      // Emit the data to the server\n      socket.emit(\"computer-move\", {\n        data: data,\n        game_state: updated_game_state,\n        comp_color: comp_color,\n      });\n      console.log(\"data emitted\", data);\n    }\n  };\n\n  const updateGameState = (\n    coor_x,\n    coor_y,\n    pawn_x,\n    pawn_y,\n    pawn,\n    l_game_state\n  ) => {\n    l_game_state[coor_y][coor_x] = pawn;\n    l_game_state[pawn_y][pawn_x] = \"\";\n    return l_game_state;\n  };\n\n  const checkCheck = (igame_state, color) => {\n    // Get all valid moves\n    // And see if anyone can eat the opponent's king\n    for (let i = 0; i <= igame_state.length - 1; i++) {\n      for (let j = 0; j <= igame_state[i].length - 1; j++) {\n        let pawn = igame_state[i][j];\n\n        if (pawn[0] === color) {\n          // When doing this don't check for castling move\n          let valid_moves1 = getValidMoves(j, i, pawn, igame_state, true);\n          for (let k = 0; k <= valid_moves1.length - 1; k++) {\n            let pawn_on_pos =\n              igame_state[valid_moves1[k][1]][valid_moves1[k][0]];\n            if (pawn_on_pos[1] === \"K\" && pawn_on_pos.length === 2) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const getTagsOfValidMoves = (valid_moves) => {\n    let tags = [];\n    if (valid_moves.length > 0) {\n      for (let i = 0; i <= valid_moves.length - 1; i++) {\n        let move = valid_moves[i];\n        let y = (move[1] + 1).toString();\n        let x = letters[move[0]];\n        let tag = x + y;\n        tags.push(tag);\n      }\n    }\n    return tags;\n  };\n\n  // lg_state == local_game_state\n  const handleCheck = (color, lg_state) => {\n    // color = Color of the king that is in danger\n    set_check(color);\n\n    // Check if it checkmate\n    const mate = checkCheckmate(lg_state, color);\n\n    if (mate) {\n      let i = \"w\";\n      if (mate === \"w\") {\n        i = \"b\";\n      }\n      set_checkmate(i);\n    }\n  };\n\n  const checkCheckmate = (state, color) => {\n    // color = color of king in danger\n    // Get all possible moves and if there are no possible moves\n    // It is checkmate\n    let v_moves1 = [];\n    console.log(\"checkmate state: \", state);\n\n    for (let i = 0; i <= 7; i++) {\n      for (let j = 0; j <= 7; j++) {\n        let pawn = state[i][j];\n\n        if (pawn[0] === color) {\n          const vm = getValidMoves(j, i, pawn, state);\n          let moves = v_moves(state, vm, j, i, pawn);\n          if (moves.length > 0) {\n            for (let x = 0; x <= moves.length - 1; x++) {\n              v_moves1.push(moves[x]);\n            }\n          }\n        }\n      }\n    }\n    if (v_moves1.length < 1) {\n      console.log(\"possible moves: \", v_moves1);\n      return color;\n    }\n    console.log(\"v_moves length: \", v_moves1.length);\n    return false;\n  };\n\n  const handleColorChoice = (color) => {\n    set_player_color(color);\n    console.log(\"color: \", color);\n    if (color === \"White\") {\n      set_comp_color(\"b\");\n    } else {\n      set_comp_color(\"w\");\n      // If computer if white make first move\n      const data = extras.getComputerMoveData(\n        game_state,\n        \"w\",\n        getValidMoves,\n        v_moves\n      );\n      // Emit the data to the server\n      socket.emit(\"computer-move\", {\n        game_state: game_state,\n        comp_color: \"w\",\n      });\n      console.log(\"data emitted\", data);\n    }\n  };\n\n  const handleExit = () => {\n    void 0;\n  };\n\n  // Set the board\n  let board_data = getBoardData();\n\n  return (\n    <div className=\"game\">\n      {end_w ? (\n        <PawnDialog\n          color={\"w\"}\n          open={true}\n          switchPawn={switchPawn}\n          data={end_w}\n        />\n      ) : null}\n      {end_b ? (\n        <PawnDialog\n          color={\"b\"}\n          open={true}\n          switchPawn={switchPawn}\n          data={end_b}\n        />\n      ) : null}\n      {checkmate !== false ? (\n        <CheckmateDialog\n          open={true}\n          winner={checkmate}\n          handleExit={handleExit}\n        />\n      ) : null}\n      {props.mode === \"1player\" && !comp_color && !player_color ? (\n        <ChooseColorDialog open={true} handleColorChoice={handleColorChoice} />\n      ) : null}\n      <Panel\n        mode={props.mode}\n        color={player_color}\n        set_game_state={set_game_state}\n        set_next_move={set_next_move}\n        set_check={set_check}\n        set_comp_color={set_comp_color}\n        set_player_color={set_player_color}\n        handleExit={handleExit}\n        next_move={next_move}\n        online={false}\n      />\n      <div className=\"board\">\n        <div className=\"squares\">\n          {board_data.map((row, i) => {\n            return (\n              <div className=\"board-row\" key={i}>\n                {row.map((square) => {\n                  return (\n                    <Square\n                      key={square.tag}\n                      tag={square.tag}\n                      value={getSquareValue(square.tag)}\n                      handleClick={handleClick}\n                      check={check}\n                      validMoves={getTagsOfValidMoves(valid_moves)}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OfflineBoard;\n","/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/panel.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/choose_pawn.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/extras.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/square.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/checkmate_dialog.js",[],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/socket/socket.js",[],["60","61"],"/Users/macbook/Desktop/Projects/react_chess/chess-client/src/components/choose_color_dialog.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":39,"column":6,"nodeType":"68","endLine":39,"endColumn":19,"suggestions":"69"},{"ruleId":"62","replacedBy":"70"},{"ruleId":"64","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'makeComputerMove'. Either include it or remove the dependency array.","ArrayExpression",["74"],["72"],["73"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [comp_color, makeComputerMove]",{"range":"77","text":"78"},[1309,1322],"[comp_color, makeComputerMove]"]